if (utils.scm_checkout()) return

def test_env_raw = [
    "TEST_BIGDATA=/data4/jwst_test_data",
    "CRDS_SERVER_URL=https://jwst-crds.stsci.edu",
    "CRDS_CONTEXT=jwst_0349.pmap",
    "CRDS_PATH=./test_outputs/crds_cache",
]

//def python_version = ['3.5', '3.6']
//def numpy_version = ['1.13', '1.14']

def CONDA_DEPS = "asdf \
                  astropy \
                  crds \
                  dask \
                  drizzle \
                  fitsblender \
                  flake8 \
                  gwcs \
                  jsonschema \
                  jplephem \
                  matplotlib \
                  namedlist \
                  numpy \
                  photutils \
                  scipy \
                  six \
                  spherical-geometry \
                  stsci.image \
                  stsci.imagestats \
                  stsci.stimage \
                  stsci.tools \
                  verhawk"
def CONDA_CHANNEL = "http://ssb.stsci.edu/conda-dev"
def PY_SETUP = "python setup.py"
def PYTEST = "pytest --basetemp=test_outputs --junit-xml=results.xml"
def PY_VER = '3.6'
def CONDA_ENV = 'py${PY_VER}'
def CONDA_CREATE = "conda create -y -q"
def WRAPPER = "with_env -n ${CONDA_ENV}"
def TEST_ROOT = "jwst/tests_nightly/general"
def matrix = []

conda.CONDA_INSTALLER_VERSION = '4.4.10'
node("jwst") {
    stage("Conda") {
        deleteDir()
        conda.install()
        sh "curl -L https://raw.githubusercontent.com/astroconda/docker-buildsys/master/with_env >miniconda/bin/with_env"
        sh "chmod 755 miniconda/bin/with_env"
        sh "printenv | sort"
    }
}

bc = new BuildConfig()
bc.nodetype = 'jwst'
bc.env_vars_raw = test_env_raw + ['PATH=./miniconda/bin:/bin:/usr/bin']
bc.build_mode = PY_VER

//Keep: "${WRAPPER} ${PYTEST} ${TEST_ROOT}",
bc.test_cmds = [
    "conda config --add channels ${CONDA_CHANNEL}",
    "${CONDA_CREATE} -n ${CONDA_ENV} python=${PY_VER} ${CONDA_DEPS}",
    "${WRAPPER} ${PY_SETUP} develop",
    "${WRAPPER} ${PYTEST} ${TEST_ROOT}/fgs ${TEST_ROOT}/nirspec",
]
matrix += bc

utils.run(matrix)
